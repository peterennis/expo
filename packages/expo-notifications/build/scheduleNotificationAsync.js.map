{"version":3,"file":"scheduleNotificationAsync.js","sourceRoot":"","sources":["../src/scheduleNotificationAsync.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,MAAM,kBAAkB,CAAC;AAC5C,OAAO,MAAM,MAAM,SAAS,CAAC;AAM7B,OAAO,qBAAqB,MAAM,yBAAyB,CAAC;AAqB5D,MAAM,CAAC,OAAO,CAAC,KAAK,UAAU,yBAAyB,CACrD,YAAiC,EACjC,OAA4B;IAE5B,6CAA6C;IAC7C,MAAM,uBAAuB,GAC3B,YAAY,CAAC,QAAQ,CAAC,EAAE,CAAC,IAAI,SAAS,CAAC;IACzC,6CAA6C;IAC7C,MAAM,EAAE,GAAG,EAAE,OAAO,EAAE,UAAU,EAAE,GAAG,WAAW,EAAE,GAAG,YAAY,CAAC;IAClE,0CAA0C;IAC1C,MAAM,wBAAwB,GAAG,EAAE,GAAG,WAAW,EAAE,GAAG,uBAAuB,EAAE,CAAC;IAChF,mBAAmB;IACnB,MAAM,EAAE,IAAI,EAAE,GAAG,oBAAoB,EAAE,GAAG,wBAAwB,CAAC;IACnE,MAAM,gBAAgB,GAAG,EAAE,GAAG,oBAAoB,EAAE,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC;IAEjF,yDAAyD;IACzD,MAAM,sBAAsB,GAAG,UAAU,IAAI,MAAM,EAAE,CAAC;IAEtD,OAAO,MAAM,qBAAqB,CAAC,yBAAyB,CAC1D,sBAAsB,EACtB,gBAAgB,EAChB,YAAY,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,CAAC,IAAI,OAAO,CAAC,CAC9C,CAAC;AACJ,CAAC;AAOD,SAAS,YAAY,CACnB,iBAAsE;IAEtE,IAAI,iBAAiB,YAAY,IAAI,EAAE;QACrC,OAAO,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,iBAAiB,CAAC,OAAO,EAAE,EAAE,CAAC;KAC7D;SAAM,IAAI,OAAO,iBAAiB,KAAK,QAAQ,EAAE;QAChD,OAAO,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,iBAAiB,EAAE,CAAC;KACnD;SAAM,IAAI,SAAS,IAAI,iBAAiB,EAAE;QACzC,OAAO;YACL,IAAI,EAAE,UAAU;YAChB,KAAK,EAAE,iBAAiB,CAAC,OAAO;YAChC,OAAO,EAAE,iBAAiB,CAAC,OAAO,IAAI,KAAK;SAC5C,CAAC;KACH;SAAM;QACL,MAAM,EAAE,OAAO,EAAE,GAAG,eAAe,EAAE,GAAG,iBAAiB,CAAC;QAC1D,OAAO,EAAE,IAAI,EAAE,UAAU,EAAE,KAAK,EAAE,eAAe,EAAE,OAAO,EAAE,CAAC;KAC9D;AACH,CAAC","sourcesContent":["import { Platform } from '@unimodules/core';\nimport uuidv4 from 'uuid/v4';\n\nimport {\n  IosNotificationRequestOptions,\n  AndroidNotificationRequestOptions,\n} from './NotificationPresenter.types';\nimport NotificationScheduler from './NotificationScheduler';\nimport {\n  NativeCalendarTrigger,\n  NativeNotificationTrigger,\n  IosNotificationTrigger,\n  AndroidNotificationTrigger,\n} from './NotificationScheduler.types';\nimport { NotificationRequest } from './presentNotificationAsync';\n\nexport type CalendarTrigger = Omit<NativeCalendarTrigger['value'], 'type'> & { repeats?: boolean };\nexport interface TimeIntervalTrigger {\n  repeats?: boolean;\n  seconds: number;\n}\nexport type DateTrigger = Date | number;\nexport type NotificationTrigger = (DateTrigger | TimeIntervalTrigger) & {\n  ios?: IosNotificationTrigger;\n  android?: AndroidNotificationTrigger;\n};\n\ntype PlatformSpecificOptions = IosNotificationRequestOptions | AndroidNotificationRequestOptions;\nexport default async function scheduleNotificationAsync(\n  notification: NotificationRequest,\n  trigger: NotificationTrigger\n): Promise<string> {\n  // Remember current platform-specific options\n  const platformSpecificOptions: PlatformSpecificOptions | undefined =\n    notification[Platform.OS] ?? undefined;\n  // Remove all known platform-specific options\n  const { ios, android, identifier, ...baseRequest } = notification;\n  // Merge current platform-specific options\n  const easyBodyNotificationSpec = { ...baseRequest, ...platformSpecificOptions };\n  // Stringify `body`\n  const { body, ...restNotificationSpec } = easyBodyNotificationSpec;\n  const notificationSpec = { ...restNotificationSpec, body: JSON.stringify(body) };\n\n  // If identifier has not been provided, let's create one.\n  const notificationIdentifier = identifier ?? uuidv4();\n\n  return await NotificationScheduler.scheduleNotificationAsync(\n    notificationIdentifier,\n    notificationSpec,\n    parseTrigger(trigger[Platform.OS] ?? trigger)\n  );\n}\n\ntype NativeTrigger =\n  | { type: 'interval'; value: number; repeats: boolean }\n  | { type: 'date'; value: number }\n  | { type: 'calendar'; value: CalendarTrigger };\n\nfunction parseTrigger(\n  userFacingTrigger: DateTrigger | TimeIntervalTrigger | CalendarTrigger\n): NativeNotificationTrigger {\n  if (userFacingTrigger instanceof Date) {\n    return { type: 'date', value: userFacingTrigger.getTime() };\n  } else if (typeof userFacingTrigger === 'number') {\n    return { type: 'date', value: userFacingTrigger };\n  } else if ('seconds' in userFacingTrigger) {\n    return {\n      type: 'interval',\n      value: userFacingTrigger.seconds,\n      repeats: userFacingTrigger.repeats ?? false,\n    };\n  } else {\n    const { repeats, ...calendarTrigger } = userFacingTrigger;\n    return { type: 'calendar', value: calendarTrigger, repeats };\n  }\n}\n"]}