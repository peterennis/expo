{"version":3,"file":"checkArgs.js","sourceRoot":"","sources":["../../src/utils/checkArgs.ts"],"names":[],"mappings":"AAAA,OAAO,oBAAoB,MAAM,qCAAqC,CAAC;AAavE,MAAM,CAAC,OAAO,UAAU,SAAS,CAC/B,SAAoB,EACpB,MAAW,EACX,QAAgB,EAChB,aAAqB;IAErB,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,EAAE;QACzC,KAAK,MAAM,YAAY,IAAI,SAAS,EAAE;YACpC,IAAI,SAAS,CAAC,cAAc,CAAC,YAAY,CAAC,EAAE;gBAC1C,MAAM,KAAK,GAAG,SAAS,CAAC,YAAY,CAAC,CACnC,MAAM,EACN,YAAY,EACZ,aAAa,EACb,QAAQ,EACR,YAAY,EACZ,oBAAoB,CACrB,CAAC;gBACF,IAAI,KAAK,YAAY,KAAK,EAAE;oBAC1B,MAAM,IAAI,KAAK,CAAC,UAAU,QAAQ,UAAU,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;iBAC9D;aACF;SACF;KACF;AACH,CAAC","sourcesContent":["import ReactPropTypesSecret from 'prop-types/lib/ReactPropTypesSecret';\n\ninterface TypeSpecs {\n  [key: string]: (\n    values: any,\n    typeSpecName: string,\n    componentName: string,\n    location: string,\n    propFullName: string,\n    secret: any\n  ) => any;\n}\n\nexport default function checkArgs(\n  typeSpecs: TypeSpecs,\n  values: any,\n  location: string,\n  componentName: string\n) {\n  if (process.env.NODE_ENV !== 'production') {\n    for (const typeSpecName in typeSpecs) {\n      if (typeSpecs.hasOwnProperty(typeSpecName)) {\n        const error = typeSpecs[typeSpecName](\n          values,\n          typeSpecName,\n          componentName,\n          location,\n          typeSpecName,\n          ReactPropTypesSecret\n        );\n        if (error instanceof Error) {\n          throw new Error(`Failed ${location} type: ${error.message}`);\n        }\n      }\n    }\n  }\n}\n"]}