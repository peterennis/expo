{"version":3,"file":"Image.js","sourceRoot":"","sources":["../src/Image.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,OAAO,CAAC;AAS1B,OAAO,SAAS,MAAM,aAAa,CAAC;AAwBpC,MAAM,CAAC,OAAO,OAAO,KAAM,SAAQ,KAAK,CAAC,SAAiC;IAA1E;;QAsBE,UAAK,GAAG;YACN,MAAM,EAAE,SAAS;YACjB,OAAO,EAAE,SAAS;SACnB,CAAC;IAKJ,CAAC;IA7BC,MAAM,CAAC,wBAAwB,CAAC,KAAiB;QAC/C,OAAO;YACL,MAAM,EAAE,KAAK,CAAC,SAAS;gBACrB,CAAC,CAAC,CAAC,CAAC,EAAE;oBACF,IAAI,KAAK,CAAC,MAAM,EAAE;wBAChB,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;qBACjB;oBACD,KAAK,CAAC,SAAU,EAAE,CAAC;gBACrB,CAAC;gBACH,CAAC,CAAC,KAAK,CAAC,MAAM;YAChB,OAAO,EAAE,KAAK,CAAC,SAAS;gBACtB,CAAC,CAAC,CAAC,CAAC,EAAE;oBACF,IAAI,KAAK,CAAC,OAAO,EAAE;wBACjB,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;qBAClB;oBACD,KAAK,CAAC,SAAU,EAAE,CAAC;gBACrB,CAAC;gBACH,CAAC,CAAC,KAAK,CAAC,OAAO;SAClB,CAAC;IACJ,CAAC;IAOD,MAAM;QACJ,OAAO,CAAC,SAAS,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,EAAG,CAAC;IAC/F,CAAC;CACF","sourcesContent":["import React from 'react';\nimport {\n  AccessibilityProps,\n  ImageSourcePropType,\n  ImageStyle,\n  NativeSyntheticEvent,\n  StyleProp,\n} from 'react-native';\n\nimport ExpoImage from './ExpoImage';\nimport { ImageErrorEventData, ImageLoadEventData, ImageLoadProgressEventData } from './Image.types';\n\nexport interface ImageProps extends AccessibilityProps {\n  // On one hand we want to pass resolved source to native module.\n  // On the other hand, react-native-web doesn't expose a resolveAssetSource\n  // function, so we can't use it there. So we pass the unresolved source\n  // to \"native components\" and they decide whether to resolve the value\n  // or not.\n  source?: ImageSourcePropType | null;\n  style?: StyleProp<ImageStyle>;\n\n  onLoadStart?: () => void;\n  onProgress?: (event: NativeSyntheticEvent<ImageLoadProgressEventData>) => void;\n  onLoad?: (event: NativeSyntheticEvent<ImageLoadEventData>) => void;\n  onError?: (error: NativeSyntheticEvent<ImageErrorEventData>) => void;\n  onLoadEnd?: () => void;\n}\n\ninterface ImageState {\n  onLoad: ImageProps['onLoad'];\n  onError: ImageProps['onError'];\n}\n\nexport default class Image extends React.Component<ImageProps, ImageState> {\n  static getDerivedStateFromProps(props: ImageProps) {\n    return {\n      onLoad: props.onLoadEnd\n        ? e => {\n            if (props.onLoad) {\n              props.onLoad(e);\n            }\n            props.onLoadEnd!();\n          }\n        : props.onLoad,\n      onError: props.onLoadEnd\n        ? e => {\n            if (props.onError) {\n              props.onError(e);\n            }\n            props.onLoadEnd!();\n          }\n        : props.onError,\n    };\n  }\n\n  state = {\n    onLoad: undefined,\n    onError: undefined,\n  };\n\n  render() {\n    return <ExpoImage {...this.props} onLoad={this.state.onLoad} onError={this.state.onError} />;\n  }\n}\n"]}