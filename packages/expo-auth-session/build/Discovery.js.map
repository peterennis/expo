{"version":3,"file":"Discovery.js","sourceRoot":"","sources":["../src/Discovery.ts"],"names":[],"mappings":"AAAA,OAAO,SAAS,MAAM,WAAW,CAAC;AAElC,OAAO,EAAE,YAAY,EAAE,MAAM,SAAS,CAAC;AA4CvC;;;GAGG;AACH,MAAM,UAAU,sBAAsB,CAAC,MAAc;IACnD,OAAO,GAAG,MAAM,mCAAmC,CAAC;AACtD,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,mBAAmB,CAAC,MAAc;IACtD,MAAM,IAAI,GAAG,MAAM,YAAY,CAAoB,sBAAsB,CAAC,MAAM,CAAC,EAAE;QACjF,QAAQ,EAAE,MAAM;QAChB,MAAM,EAAE,KAAK;KACd,CAAC,CAAC;IAEH,OAAO;QACL,iBAAiB,EAAE,IAAI;QACvB,qBAAqB,EAAE,IAAI,CAAC,sBAAsB;QAClD,aAAa,EAAE,IAAI,CAAC,cAAc;QAClC,kBAAkB,EAAE,IAAI,CAAC,mBAAmB;QAC5C,gBAAgB,EAAE,IAAI,CAAC,iBAAiB;QACxC,kBAAkB,EAAE,IAAI,CAAC,oBAAoB;QAC7C,oBAAoB,EAAE,IAAI,CAAC,qBAAqB;KACjD,CAAC;AACJ,CAAC;AAED;;;;GAIG;AACH,MAAM,CAAC,KAAK,UAAU,qBAAqB,CACzC,iBAAoC;IAEpC,SAAS,CACP,iBAAiB,IAAI,CAAC,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC,QAAQ,CAAC,OAAO,iBAAiB,CAAC,EAC9E,iDAAiD,CAClD,CAAC;IACF,IAAI,OAAO,iBAAiB,KAAK,QAAQ,EAAE;QACzC,OAAO,MAAM,mBAAmB,CAAC,iBAAiB,CAAC,CAAC;KACrD;IACD,OAAO,iBAAiB,CAAC;AAC3B,CAAC","sourcesContent":["import invariant from 'invariant';\n\nimport { requestAsync } from './Fetch';\n\nexport type DiscoveryDocument = Record<string, string | boolean | string[]> & {\n  authorization_endpoint: string;\n  token_endpoint: string;\n  revocation_endpoint?: string;\n  userinfo_endpoint?: string;\n  registration_endpoint?: string;\n  end_session_endpoint?: string;\n  claims_supported?: string[];\n  check_session_iframe?: string;\n  backchannel_logout_supported?: boolean;\n  backchannel_logout_session_supported?: boolean;\n  code_challenge_methods_supported?: string[];\n  device_authorization_endpoint?: string;\n  frontchannel_logout_session_supported?: boolean;\n  frontchannel_logout_supported?: boolean;\n  grant_types_supported?: string[];\n  id_token_signing_alg_values_supported?: string[];\n  introspection_endpoint?: string;\n  issuer?: string;\n  jwks_uri?: string;\n  request_parameter_supported?: boolean;\n  response_modes_supported?: string[];\n  scopes_supported?: string[];\n  subject_types_supported?: string[];\n  token_endpoint_auth_methods_supported?: string[];\n};\n\nexport interface Discovery {\n  authorizationEndpoint: string;\n  tokenEndpoint: string;\n  // The spec requires a revocation endpoint but some providers (like Spotify) do not support one.\n  revocationEndpoint?: string;\n  userInfoEndpoint?: string;\n  endSessionEndpoint?: string;\n  // Dynamic client registration endpoint\n  registrationEndpoint?: string;\n\n  discoveryDocument: DiscoveryDocument;\n}\n\nexport type IssuerOrDiscovery = string | Discovery;\n\n/**\n * Append the well known resources path and OpenID connect discovery document path to a URL\n * https://tools.ietf.org/html/rfc5785\n */\nexport function issuerWithWellKnownUrl(issuer: string): string {\n  return `${issuer}/.well-known/openid-configuration`;\n}\n\nexport async function fetchDiscoveryAsync(issuer: string): Promise<Discovery> {\n  const json = await requestAsync<DiscoveryDocument>(issuerWithWellKnownUrl(issuer), {\n    dataType: 'json',\n    method: 'GET',\n  });\n\n  return {\n    discoveryDocument: json,\n    authorizationEndpoint: json.authorization_endpoint,\n    tokenEndpoint: json.token_endpoint,\n    revocationEndpoint: json.revocation_endpoint,\n    userInfoEndpoint: json.userinfo_endpoint,\n    endSessionEndpoint: json.end_session_endpoint,\n    registrationEndpoint: json.registration_endpoint,\n  };\n}\n\n/**\n * Utility method for resolving the discovery document from an issuer or object.\n *\n * @param issuerOrDiscovery\n */\nexport async function resolveDiscoveryAsync(\n  issuerOrDiscovery: IssuerOrDiscovery\n): Promise<Discovery> {\n  invariant(\n    issuerOrDiscovery && !['number', 'boolean'].includes(typeof issuerOrDiscovery),\n    'Expected a valid discovery object or issuer URL'\n  );\n  if (typeof issuerOrDiscovery === 'string') {\n    return await fetchDiscoveryAsync(issuerOrDiscovery);\n  }\n  return issuerOrDiscovery;\n}\n"]}