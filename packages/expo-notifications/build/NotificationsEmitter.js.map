{"version":3,"file":"NotificationsEmitter.js","sourceRoot":"","sources":["../src/NotificationsEmitter.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,EAAgB,kBAAkB,EAAE,MAAM,kBAAkB,CAAC;AAwBlF,iCAAiC;AACjC,MAAM,OAAO,GAAG,IAAI,YAAY,CAAC,kBAAkB,CAAC,wBAAwB,CAAC,CAAC;AAC9E,MAAM,+BAA+B,GAAG,0BAA0B,CAAC;AACnE,MAAM,6BAA6B,GAAG,wBAAwB,CAAC;AAC/D,MAAM,uCAAuC,GAAG,kCAAkC,CAAC;AAMnF,MAAM,UAAU,uBAAuB,CAAC,QAA8B;IACpE,MAAM,aAAa,GAAG;QACpB,OAAO,CAAC,WAAW,CAAe,+BAA+B,EAAE,YAAY,CAAC,EAAE;YAChF,QAAQ,CAAC,EAAE,YAAY,EAAE,IAAI,EAAE,sBAAsB,EAAE,CAAC,CAAC;QAC3D,CAAC,CAAC;QACF,OAAO,CAAC,WAAW,CAAuB,uCAAuC,EAAE,QAAQ,CAAC,EAAE;YAC5F,QAAQ,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,8BAA8B,EAAE,CAAC,CAAC;QAC/D,CAAC,CAAC;QACF,OAAO,CAAC,WAAW,CAAO,uCAAuC,EAAE,GAAG,EAAE;YACtE,QAAQ,CAAC,EAAE,IAAI,EAAE,sBAAsB,EAAE,CAAC,CAAC;QAC7C,CAAC,CAAC;KACH,CAAC;IAEF,OAAO;QACL,MAAM,EAAE,GAAG,EAAE;YACX,KAAK,IAAI,YAAY,IAAI,aAAa,EAAE;gBACtC,YAAY,CAAC,MAAM,EAAE,CAAC;aACvB;QACH,CAAC;QACD,eAAe,EAAE,aAAa;KACP,CAAC;AAC5B,CAAC;AAED,MAAM,UAAU,8BAA8B,CAAC,YAA0B;IACvE,IAAI,iBAAiB,IAAI,YAAY,EAAE;QACrC,MAAM,oBAAoB,GAAyB,YAAY,CAAC;QAChE,KAAK,IAAI,YAAY,IAAI,oBAAoB,CAAC,eAAe,EAAE;YAC7D,OAAO,CAAC,kBAAkB,CAAC,YAAY,CAAC,CAAC;SAC1C;KACF;SAAM;QACL,OAAO,CAAC,kBAAkB,CAAC,YAAY,CAAC,CAAC;KAC1C;AACH,CAAC;AAED,MAAM,UAAU,8BAA8B;IAC5C,OAAO,CAAC,kBAAkB,CAAC,+BAA+B,CAAC,CAAC;IAC5D,OAAO,CAAC,kBAAkB,CAAC,6BAA6B,CAAC,CAAC;IAC1D,OAAO,CAAC,kBAAkB,CAAC,uCAAuC,CAAC,CAAC;AACtE,CAAC","sourcesContent":["import { EventEmitter, Subscription, NativeModulesProxy } from '@unimodules/core';\nimport { Notification, NotificationResponse } from './NotificationsEmitter.types';\n\ninterface NotificationReceivedEvent {\n  type: 'notificationReceived';\n  notification: Notification;\n}\n\ninterface NotificationResponseEvent {\n  type: 'notificationResponseReceived';\n  response: NotificationResponse;\n}\n\ninterface NotificationsDroppedEvent {\n  type: 'notificationsDropped';\n}\n\nexport type NotificationEvent =\n  | NotificationReceivedEvent\n  | NotificationResponseEvent\n  | NotificationsDroppedEvent;\n\nexport type NotificationListener = (notification: NotificationEvent) => void;\n\n// Web uses SyntheticEventEmitter\nconst emitter = new EventEmitter(NativeModulesProxy.ExpoNotificationsEmitter);\nconst didReceiveNotificationEventName = 'onDidReceiveNotification';\nconst didDropNotificationsEventName = 'onNotificationsDeleted';\nconst didReceiveNotificationResponseEventName = 'onDidReceiveNotificationResponse';\n\ntype CompoundSubscription = Subscription & {\n  __subscriptions: Subscription[];\n};\n\nexport function addNotificationListener(listener: NotificationListener): Subscription {\n  const subscriptions = [\n    emitter.addListener<Notification>(didReceiveNotificationEventName, notification => {\n      listener({ notification, type: 'notificationReceived' });\n    }),\n    emitter.addListener<NotificationResponse>(didReceiveNotificationResponseEventName, response => {\n      listener({ response, type: 'notificationResponseReceived' });\n    }),\n    emitter.addListener<void>(didReceiveNotificationResponseEventName, () => {\n      listener({ type: 'notificationsDropped' });\n    }),\n  ];\n\n  return {\n    remove: () => {\n      for (let subscription of subscriptions) {\n        subscription.remove();\n      }\n    },\n    __subscriptions: subscriptions,\n  } as CompoundSubscription;\n}\n\nexport function removeNotificationSubscription(subscription: Subscription) {\n  if ('__subscriptions' in subscription) {\n    const compoundSubscription: CompoundSubscription = subscription;\n    for (let subscription of compoundSubscription.__subscriptions) {\n      emitter.removeSubscription(subscription);\n    }\n  } else {\n    emitter.removeSubscription(subscription);\n  }\n}\n\nexport function removeAllNotificationListeners() {\n  emitter.removeAllListeners(didReceiveNotificationEventName);\n  emitter.removeAllListeners(didDropNotificationsEventName);\n  emitter.removeAllListeners(didReceiveNotificationResponseEventName);\n}\n"]}