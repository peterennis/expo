{"version":3,"file":"presentNotificationAsync.js","sourceRoot":"","sources":["../src/presentNotificationAsync.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,mBAAmB,EAAE,QAAQ,EAAE,MAAM,kBAAkB,CAAC;AACjE,OAAO,MAAM,MAAM,SAAS,CAAC;AAE7B,OAAO,qBAAqB,MAAM,yBAAyB,CAAC;AAuB5D,MAAM,CAAC,OAAO,CAAC,KAAK,UAAU,wBAAwB,CAAC,EACrD,UAAU,EACV,GAAG,YAAY,EACK;IACpB,IAAI,CAAC,qBAAqB,CAAC,wBAAwB,EAAE;QACnD,MAAM,IAAI,mBAAmB,CAAC,eAAe,EAAE,0BAA0B,CAAC,CAAC;KAC5E;IAED,yDAAyD;IACzD,MAAM,sBAAsB,GAAG,UAAU,IAAI,MAAM,EAAE,CAAC;IAEtD,6CAA6C;IAC7C,MAAM,uBAAuB,GAA4B,YAAY,CAAC,QAAQ,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC;IACzF,6CAA6C;IAC7C,MAAM,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG,WAAW,EAAE,GAAG,YAAY,CAAC;IACtD,0CAA0C;IAC1C,MAAM,wBAAwB,GAAG,EAAE,GAAG,WAAW,EAAE,GAAG,uBAAuB,EAAE,CAAC;IAChF,mBAAmB;IACnB,MAAM,EAAE,IAAI,EAAE,GAAG,oBAAoB,EAAE,GAAG,wBAAwB,CAAC;IACnE,MAAM,gBAAgB,GAAG,EAAE,GAAG,oBAAoB,EAAE,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC;IAEjF,OAAO,MAAM,qBAAqB,CAAC,wBAAwB,CACzD,sBAAsB,EACtB,gBAAgB,CACjB,CAAC;AACJ,CAAC","sourcesContent":["import { UnavailabilityError, Platform } from '@unimodules/core';\nimport uuidv4 from 'uuid/v4';\n\nimport NotificationPresenter from './NotificationPresenter';\nimport {\n  BaseNotificationRequest,\n  IosNotificationRequestOptions as IosRequestOptions,\n  AndroidNotificationRequestOptions as AndroidRequestOptions,\n} from './NotificationPresenter.types';\n\n// We will let developers pass in body as an object\n// and we will stringify it before passing to native\ninterface EasyBodyBaseNotificationRequest extends Omit<BaseNotificationRequest, 'body'> {\n  body?: { [key: string]: any };\n}\n\ntype IosNotificationRequest = Partial<EasyBodyBaseNotificationRequest> & IosRequestOptions;\ntype AndroidNotificationRequest = Partial<EasyBodyBaseNotificationRequest> & AndroidRequestOptions;\ntype PlatformSpecificRequest = IosNotificationRequest | AndroidNotificationRequest;\n\nexport type NotificationRequest = EasyBodyBaseNotificationRequest & {\n  identifier?: string;\n  ios?: IosNotificationRequest;\n  android?: AndroidNotificationRequest;\n};\n\nexport default async function presentNotificationAsync({\n  identifier,\n  ...notification\n}: NotificationRequest): Promise<void> {\n  if (!NotificationPresenter.presentNotificationAsync) {\n    throw new UnavailabilityError('Notifications', 'presentNotificationAsync');\n  }\n\n  // If identifier has not been provided, let's create one.\n  const notificationIdentifier = identifier ?? uuidv4();\n\n  // Remember current platform-specific options\n  const platformSpecificOptions: PlatformSpecificRequest = notification[Platform.OS] ?? {};\n  // Remove all known platform-specific options\n  const { ios, android, ...baseRequest } = notification;\n  // Merge current platform-specific options\n  const easyBodyNotificationSpec = { ...baseRequest, ...platformSpecificOptions };\n  // Stringify `body`\n  const { body, ...restNotificationSpec } = easyBodyNotificationSpec;\n  const notificationSpec = { ...restNotificationSpec, body: JSON.stringify(body) };\n\n  return await NotificationPresenter.presentNotificationAsync(\n    notificationIdentifier,\n    notificationSpec\n  );\n}\n"]}